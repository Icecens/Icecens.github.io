{"meta":{"title":"Icecens' blog","subtitle":null,"description":"Time will tell","author":"YY","url":""},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-03-15T19:41:30.000Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-03-15T19:41:30.000Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-03-15T19:41:30.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-03-15T19:41:30.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-03-15T19:41:30.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-03-15T19:41:30.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-03-15T19:41:30.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-03-15T19:41:30.000Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-03-15T19:41:30.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-03-15T19:41:30.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-03-15T19:41:30.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-03-15T19:41:30.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"}],"posts":[{"title":"Spring Security(1)：begin","slug":"Spring-Security-1-begin","date":"2021-09-07T09:29:59.000Z","updated":"2021-11-08T09:49:19.158Z","comments":true,"path":"2021/09/07/Spring-Security-1-begin/","link":"","permalink":"/2021/09/07/Spring-Security-1-begin/","excerpt":"","text":"web应用的安全性、安全框架两大功能 用户认证：系统判断用户是否能登录 用户授权：系统判断用户是否有某操作权限 security比shiro强大、重量级 使用导包以后访问该应用就需要登录了（ip+端口对应就需要，也就是任何controller都需要登录），默认用户名user，密码每次启动都会生成 需要做的其实就是：处理logout返回结果 基本原理本质ss本质是一个过滤器链，启动时可以看到；每个过滤器都会执行dofilter方法，放行后才可进入下一个过滤器，这就是过滤器链。具体过滤器举例略 加载过程Springboot自动配置ss，如果用spring会比较麻烦要自己配置。其他略 两个重要接口UserDetailsService接口：什么都不配置时，账号默认、密码自动生成，实际项目中是在数据库中查询，所以要自定义逻辑来控制用户认证，只需实现该接口即可。即在里面写查数据库的过程，返回User对象 UsernamePasswordAuthenticationFilter类：用于接收post请求提交过来的用户名密码，若无则用默认的；所以需要写一个过滤器继承这个类，重写它的3个方法 PasswordEncoder接口：加密密码的接口，ss只认这种方式 web权限方案用户认证：设置用户名密码可通过 配置文件、配置类、自定义编写实现类 的方式实现 配置文件就是在.yml中改，配置类就是自己写一个config类。自定义编写实现类就是把查数据库的类也自己实现 自定义实现类两步 创建配置类 编写实现类 用户授权自定义登录页面 及 认证选择认证选择：有些页面需要登录才能访问，有些不需要 均只需要在配置类中配置一下即可 基于权限和角色的访问控制hasAuthority方法针对单个权限控制 hasAnyAuthority多个权限 hasRole用法差不多，但是在UserDetailService实现类中要给role的本名加上ROLE_，比如config中role设置为sale，实现类中则为ROLE_role hasAnyRole略 自定义403页面也是配置类中配一下，.exceptionHandling().accessDeniedPage(“/myunauth.html”) 注解的使用想使用这些注解，要先在启动类中用该注解来开启security注解功能 @Secured({“ROLE_normal”,”ROLE_admin”}) 启动类中开启@EnableGlobalMethodSecurity(securedEnabled=true) 加在controller方法中，若用户具有某角色则可访问该方法（这也体现了基于角色控制用得比基于权限控制多）（可以直接加在controller类中吗？？） @PreAuthorize 和 @PostAuthorize 启动类中开启@EnableGlobalMethodSecurity(prePostEnabled=true) 进入方法前/后的权限验证（基于权限和角色都可以） @PreFilter 和 @PostFilter 数据过滤 用户注销http.logout().logouturl(“/logout”).logoutSuccessUrl(“/test/hello”).permitAll(); 自动登录（xx天内免登录）cookie技术也能实现，缺点：由于是客户端存cookie，涉密信息（密码等）也会存到浏览器中所以用ss框架中的机制实现 实现原理也用到了cookie， JWT是一个跨域认证解决方案，实质是一种特殊的token，三个部分组成（前两个用base64编码） Header（头部） Payload（负载） Signature（签名） jwt就是一个字符串 Header.Payload.Signature hrtms-log 车队项目记录（发现自己很多次没有重新启动apigateway） 前提：8100用不了9002那种filter的跨域配置，用的是webadapter那种 如果8100和9002都配置跨域，那么只有9002处理一次请求，但cors头部会多一个allow-origin字段 如果8100有，9002没有，结果是请求都不报错，但是前端报错、弹出error，并且尝试重定向到security自带的login页面（8100端口），也就是login了两次，此时如果输入id和密码，后端报错：... Unrecognized token &#39;userId&#39;: was expecting ... 上述8100中均在securityconfig中加入了跨域配置 如果8100连这个也去掉，也就是完全不考虑跨域配置，那么也会login两次，第二次是8100、security自带的login页面（因为是get请求）；但这时是有userinfo的get请求的，但是状态码302也就是被security重定向了，可能是没放权限 先permitall试试，这次只报了一个错：某些 Cookie 滥用推荐的“SameSite“属性，但没法跳转。接下来postman调试权限部分，跨域彻底解决要整合时再做 收获待项目结束后再补充！！ 要搞懂这个什么意思 这个又是什么鬼 Data truncation: Data too long for column &#39;xxx&#39; at row 1：varchar()太小了 post请求要带参数","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"软件设计模式与体系结构","slug":"软件设计模式与体系结构","date":"2021-09-07T09:29:59.000Z","updated":"2021-11-08T09:49:18.300Z","comments":true,"path":"2021/09/07/软件设计模式与体系结构/","link":"","permalink":"/2021/09/07/软件设计模式与体系结构/","excerpt":"","text":"software design pattern &amp; software architecture 高频点依赖倒转/倒置、面向接口/抽象编程、要依赖于抽象而非具体，几乎每章都出现，典型例子用接口声明对象接收创建的实现类对象 依赖倒转：依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程（面向接口编程），这样就降低了客户与实现模块间的耦合 面向过程的开发，上层调用下层，上层依赖于下层，当下层剧烈变动时上层也要跟着变动，这就会导致模块的复用性降低而且大大提高了开发的成本。 面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度 创建型DPcreational design pattern 工厂模式factory pattern 所有东西都放一个类的最大缺点：可扩展性差，以后加一行代码都要改不同模块的一堆代码，因为不能保证每句都是对的，解决方法是使用一些架构/模式，如mvc，哪个模块出错/需要扩展就改哪里 开闭原则：对模块行为/功能扩展时开放的，对修改是封闭的（扩展时不允许修改已存在的类的源代码） 增加一条if语句算满足开闭原则吗？知乎/问老师 该模式就是对创建对象过程的抽象。要创建的类称为产品类，每个产品类都有与之对应的工厂类/方法来创建它们。分为两种具体模式 简单工厂模式：一个工厂类里定义所有创建对象的方法，可扩展性差，如果要增加一个产品需要修改和编译工厂类 正常工厂模式：每个产品类对应一个工厂类，工厂类也形成层次类 作用 本质就是对获取对象过程的抽象 希望能够创建一个对象，但创建过程比较复杂，希望对外隐藏这些细节，于是用工厂来创建 另一种说法是解耦 （抽象、隐藏/屏蔽、解耦） 抽象工厂模式abstract factory 当层次类具有类似结构时，仿照该结构创建对应的工厂层次类，根据需要来调用抽象工厂的实现类中的构造方法 核心思想是抽象，其本质是找相同属性/特征 eg 三类房子，每种房子有super、medium两种户型（该模式只能两个属性/属性维度，房子类型、房子大小/户型） 代码中的一个设计，超类中创建子类对象（2021年9月9日 17:01:23 这个时间附近的没听） 结构型DPstructural 适配器模式adapter （本章接口指开放方法的类） 该模式作用/目的主要是改变或扩展接口。拿到原有的接口、需求接口，写一个类充当适配器/中介，去继承/调用原有接口，实现新接口并把这个接口开放给客户类。具体分为两种模式 类适配器模式：适用于单接口，适配器类直接继承原接口 对象适配器模式：适用于多个接口的聚合、改装，在适配器类中添加原接口成员，即通过引用来实现改装或聚合 两种均需要开放出target新接口！ 桥模式bridge 桥模式 基于面向抽象/接口编程，将一个有两种属性（eg，coffe的cup size和种类）的类分为抽象、实现两个层次类，客户程序调用抽象层，抽象层引用实现层的接口对象；责任分离，实现接口提供原始操作（dao等），抽象层提供高级业务逻辑 另一个说法：尽量依赖于抽象而不是依赖于具体 好处：改善扩展性 何时使用：想避免抽象层次类和实现层次类的永久耦合时，eg当实现层必须在运行时或转换时选择对象 实例 几个特点 面向接口编程，实现层次类在右边，左边的实现类中方法更抽象 两个层次类通过引用的方式低耦合，抽象层次类的接口中有一个实现层次类的接口成员 调用时，先创建实现层次类对象并用接口接收；所以可以根据这个顺序来决定谁是抽象层、谁是实现层 作业那个例子，writer直接操作数据库，所以作为实现层 行为型DPbehavioral 策略模式strategy 所有方法都放主类里，缺点 增删改某算法，需要重新编译整个类 可复用性差 实现了依赖倒转 Context上下文类的两种功能 将所有数据一次性传递给策略类 将自己作为对象传给策略类，供策略类调用 （其实应该还有：解耦客户类和策略类（为什么要？只有策略类需要context对象时才需要吧？），自己和策略类高耦合） eg 状态模式state 和strategy类似，只是把策略类换成状态类，使用场景不同 Context类作用 定义客户程序需要的接口 保持对状态类型State的引用，Context对象包含当前状态子类对象 可以包含部分业务逻辑 可以由Context对象或者State层次类来决定状态的转换 eg 访问者visitor 两个类将自身对象互相传递的好处：调用方便 eg 简单情况，无visitor层次类，无复合结构 eg 有Visitor层次类，有复合结构的visitor pattern 重点（大概率要考） accept方法：每个accept里要指定访问方法，这个模式就是这样关联两个层次类、实现自动访问的 ObjectStructure类：实现批量访问 中介者mediator 当架构中类较少时，类可以直接通信（如context和strategy、context和state），但当类很多时，直接通信会混乱，因此需要一个中介类/中介层次类，来实现参与者类的类间通信，禁止原有的类间直接通信 一个很好的类比：机场 优点 提高参与者类的复用性 参与者的关系可由中介者调节 有利于参与者类的单元测试 有利于参与者类的修改，低耦合使得修改后只需编译一个类，不影响其他 缺点 影响性能 观察者observer SAsoftware architecture MVC SA把所有方法放一个类的缺点 可扩展性差，加入新的方法必须修改这个类 可维护性差，修改类某个方法必须重新编译整个类 MVC：the Model (business logic),the View (user interface), andthe Controller (user input). 层次SALayered 系统按层次组织，每一层为上一层提供服务，并调用下一层提供的服务/充当下一层的客户，最底层通常是硬件 拓扑限制：不允许隔层调用，交互仅仅在相邻层进行；不允许反方向调用 区别：见ppt 主程序-子程序SA 面向对象SA均属于调用-返回架构 批处理SA属于数据流风格SA 就是os里的串行，数据成批传输、串行顺序处理 90-92互联网诞生，这3种SA都是非互联网架构 非结构化编程：有goto的 缺点（都是goto的锅） 逻辑难分析 难修改 难合并 难测试 结构化编程： 数据共享：相同变量被多个程序/函数反复调用，是为了节省内存（上世纪60-70年代计算机性能差），面向对象编程取消了数据共享 管道-过滤器SApipe-filter, 属于数据流风格SA 易复用、易扩展、易修改：均因为过滤器间互不调用 事件系统/基于事件的SAevent sys observer/observable模式就是小型的event sys 客户端-服务器SAclient-server 互操作性interoperablility: 两个网站互相访问、协同工作？ 动机 在多个用户之间共享资源 客户端软件与最终用户交互 服务器软件与共享资源交互 p2p第二代 gnutella 缺点：节点多时资源难找到 传统的纯P2P体系结构在运行中存在很多问题,主要体现在基于泛洪的第二代P2P网络中当网络变得很大时,系统的搜索/回答率会变得很低。为了解决该问题,代表基于层次的第三代p2p系统应运而生 DHT：根据KID找VID（实际标识了具体某台机器） 网格计算","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"专业课","slug":"专业课","permalink":"/tags/专业课/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-08-29T09:49:49.000Z","updated":"2021-11-08T09:50:05.287Z","comments":true,"path":"2021/08/29/hello-world/","link":"","permalink":"/2021/08/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}